TODO: instructions for virtual environment
conda activate web-starter-sheets-env
This can run but not sure if I can do it this way^

Pipenv installing versus pip installing 
pipenv shell will run to activate just remember that powershell isn't going to show up. 
When running stocks_services.py unlike in class I have to go outside of services folder.
pipenv install python-dotenv requests basilica tweepy 


dir(requests), response.text can be used to investigate data
typed in data = json.loads(response.text) then use type(data)

Also setup a database:

```sh
FLASK_APP=web_app flask db init
FLASK_APP=web_app flask db migrate
FLASK_APP=web_app flask db upgrade
```

## Usage

```sh
# Mac:
FLASK_APP=hello.py flask run
# Windows:
set FLASK_APP=hello.py # one-time thing, to set the env var
flask run
```


Might come in handy
import basilica
import os
from dotenv import load_dotenv

load_dotenv()

BASILICA_API_KEY = os.getenv("BASILICA_API_KEY")

connection = basilica.Connection(BASILICA_API_KEY)
print(type(connection)) #> <class 'basilica.Connection'>

embedding = connection.embed_sentence("hey this is a cool tweet", model="twitter")
print(embedding)
# > a list of 768 numbers

tweets = ["Hello workd", "artificial intelligence", "another tweet here #cool"]
embeddings = connection.embed_sentences(tweets, model="twitter")
for embed in embeddings:
    print("-----")
    print(len(embed))



import tweepy
import os
from dotenv import load_dotenv

load_dotenv()

TWITTER_API_KEY = os.getenv("TWITTER_API_KEY")
TWITTER_API_SECRET = os.getenv("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN = os.getenv("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_TOKEN_SECRET = os.getenv("TWITTER_ACCESS_TOKEN_SECRET")

auth = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET)
auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET)
print(type(auth)) #> <class 'tweepy.auth.OAuthHandler'>

api = tweepy.API(auth)
print(type(api)) #> <class 'tweepy.api.API'>

print("-----------------")
print("USER")
user = api.get_user("elonmusk")
print(type(user)) #> <class 'tweepy.models.User'>
print(user.screen_name)
print(user.id)
print(user.statuses_count)

print("-----------------")
print("STATUSES")
#statuses = api.user_timeline("elonmusk", count=35)
#for status in statuses:
#    print("--")
#    print(status.text)

statuses = api.user_timeline("elonmusk", tweet_mode="extended", count=35, exclude_replies=True, include_rts=False)
for status in statuses:
    print("--")
    print(status.full_text)

status = statuses[0]
print(type(status)) #> <class 'tweepy.models.Status'>

print(status.id)
print(status.full_text)


models.py
    title = db.Column(db.String(128))
    author_id = db.Column(db.String(128))

class User(db.Model):
    id = db.Column(db.BigInteger, primary_key=True)
    screen_name = db.Column(db.String(128), nullable=False)
    name = db.Column(db.String)
    location = db.Column(db.String)
    followers_count = db.Column(db.Integer)
    #latest_tweet_id = db.Column(db.BigInteger)

class Tweet(db.Model):
    id = db.Column(db.BigInteger, primary_key=True)
    user_id = db.Column(db.BigInteger, db.ForeignKey("user.id"))
    full_text = db.Column(db.String(500))
    embedding = db.Column(db.PickleType)

    user = db.relationship("User", backref=db.backref("tweets", lazy=True))

def parse_records(database_records):
    """
    A helper method for converting a list of database record objects into a list of dictionaries, so they can be returned as JSON